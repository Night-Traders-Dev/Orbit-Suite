import time, datetime
from blockchain.blockutil import load_chain
from config.configutil import TXConfig

def load_balance(username):
    blockchain = load_chain(username)
    balance_from_ledger = 0
    locked_from_ledger = []
    total_sent = 0
    total_received = 0


    for block in blockchain:
        for tx_data in block.get("transactions", []):
            tx = TXConfig.Transaction.from_dict(tx_data)
            note = tx.note if tx.note else ""
            is_sender = tx.sender == username
            is_recipient = tx.recipient == username
            if tx.sender == username:
                total_sent += tx.amount
            if tx.recipient == username:
                total_received += tx.amount
            # Handle transfer
            if not note or "transfer" in note:
                if is_sender:
                    balance_from_ledger -= tx.amount
                if is_recipient:
                    balance_from_ledger += tx.amount

            # Handle mining reward
            elif "mining reward" in note:
                if is_recipient:
                    balance_from_ledger += tx.amount

            # Handle lockup
            elif "lockup" in note:
                if is_sender:
                    locked_from_ledger.append({
                        "amount": tx.amount,
                        "start": tx.timestamp,
                        "days": tx.lock_duration,
                        "locked": tx.claim_until or (tx.timestamp + tx.lock_duration * 86400),
                    })
                    balance_from_ledger -= tx.amount

            # Handle claimed rewards
            elif "claimed reward" in note:
                if is_recipient:
                    balance_from_ledger += tx.amount

    locked = 0
    from blockchain.stakeutil import get_user_lockups
    total_locked = get_user_lockups(username)
    for i, lock in enumerate(total_locked):
        locked += lock["amount"]
    balance = abs(total_received - total_sent)

    return balance, locked

