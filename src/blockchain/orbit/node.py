import time
import threading
from blockchain.blockutil import start_listener, load_chain
from blockchain.orbitutil import load_nodes, save_nodes, select_next_validator, simulate_quorum_vote, sign_vote, relay_pending_proposal
from config.configutil import OrbitDB


def run_node(node_id):
    print(f"[Node Mode] Starting node: {node_id}")

    # Start listener thread for incoming proposals
    listener_thread = threading.Thread(target=start_listener, args=(node_id,), daemon=True)
    listener_thread.start()

    # Optionally loop to attempt proposing or validating blocks
    while True:
        print(f"[Node Mode] {node_id} waiting for validation opportunities...")
        chain = load_chain()
        last_block = chain[-1]

        # Check if this node is the next validator
        next_validator = select_next_validator()
        if next_validator == node_id:
            print(f"[Validator] {node_id} selected to validate block #{last_block['index'] + 1}")
            # Simulate empty or test block proposal (or load pending txs if available)
            dummy_block = {
                "index": last_block["index"] + 1,
                "timestamp": time.time(),
                "transactions": [],
                "previous_hash": last_block["hash"],
                "hash": "",
                "validator": node_id,
                "signatures": {},
                "merkle_root": "",
                "nonce": 0,
                "metadata": {"note": "Autogenerated node proposal"}
            }
            dummy_block["signatures"][node_id] = sign_vote(node_id, dummy_block)
            relay_pending_proposal(node_id, dummy_block)

        time.sleep(30)  # Wait between cycles


if __name__ == "__main__":
    # Example hardcoded node ID or load from CLI/env
    node_id = "Master01"
    nodes = load_nodes()

    if node_id not in nodes:
        print("Node ID not found in network. Registering temporarily.")
        nodes[node_id] = {
            "address": "localhost",
            "port": 5000,
            "quorum_slice": [],
            "trust_score": 1.0,
            "uptime_score": 1.0
        }
        save_nodes(nodes)

    run_node(node_id)
